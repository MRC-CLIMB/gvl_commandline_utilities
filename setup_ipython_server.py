
"""
Set up an ipython notebook profile for use over the web on GVL servers.

After running this script, change to your project directory and run

   ipython notebook --profile=nbserver

For security, you should not launch ipython notebook from your home directory, 
as it will have access to files in the directory tree it is run from.
Create a notebook or project directory and launch it from there.

This script will:
* Create a profile (nbserver) to use for the notebook server
* Configure password protection
* Configure HTTPS encryption
* Configure port settings
* Install the Table of Contents plugin
"""

##
# Clare Sloggett, VLSCI, University of Melbourne
# Authored as part of the Genomics Virtual Laboratory project
##

# TODO: at end, tell user how to use
# TODO: add Table of Contents plugin
# TODO: set up readonly as well as interactive server

import os
import IPython.lib
import logging
import subprocess
import stat

profile_name = "nbserver"
interactive_port =  9510
readonly_port = 9560
interactive_location = "/ipython"

profile_config = \
"""
# Configuration file for ipython, intended for notebook server. 
# Generated by GVL setup script.

c = get_config()

# Kernel config
c.IPKernelApp.pylab = 'inline'  # plotting support by default

# Do not open local browser, just run as a server
c.NotebookApp.open_browser = False

# Require password access. 
c.NotebookApp.password = u'{hash}'

# Use a known port, which should match that in nginx port forwarding.
# Do not try any other ports.
c.NotebookApp.port = {port}
c.NotebookApp.port_retries = 0

# Assume that we will run at a subdirectory when port-forwarded
c.NotebookApp.base_project_url = '{location}/'
c.NotebookApp.base_kernel_url = '{location}/'
c.NotebookApp.webapp_settings = {{'static_url_prefix':'{location}/static/'}}

# Note that we do not set c.NotebookApp.ip, so by default the servers will only
# listen on localhost. We are relying on NGINX port forwarding.
# We also do not set up encryption, which is essential to encrypt the password.
# NGINX will do this for us. If c.NotebookApp.ip is set here then c.NotebookApp.certfile
# should also be set.
"""
#c.NotebookApp.certfile = u'/absolute/path/to/your/certificate/mycert.pem'

def main():
    """ The body of the script. """

    # Initialise logging to print info to screen
    logging.basicConfig(level=logging.INFO)

    # Get locations
    ipython_dir = IPython.utils.path.get_ipython_dir()
    nginx_dir = "/usr/nginx/conf"
    nginx_conf = os.path.join(nginx_dir, "nginx.conf")

    # Create the nbserver profile
    logging.info("Creating ipython profile for "+profile_name)
    profile_dir = os.path.join(ipython_dir, "profile_"+profile_name)
    run_cmd("ipython profile create "+profile_name)
    #profile_dir = IPython.core.profiledir.ProfileDir.create_profile_dir_by_name(ipython_dir, profile_name)

    # Ask the user for a password; only store the hash
    logging.info("Configuring password")
    print "Enter a password to use for ipython notebook web access:"
    password_hash = IPython.lib.passwd()
    
    # Overwrite the default profile config with ours
    config_file = os.path.join(profile_dir, "ipython_config.py")
    logging.info("Writing nbserver config file "+config_file)
    with open(config_file, 'wb') as f:
        f.write(profile_config.format(hash = password_hash, port = interactive_port, location = interactive_location))
  
def run_cmd(command):
    """ Run a shell command. """
    process = subprocess.Popen(command.split(), stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    return process.communicate()  

if __name__ == "__main__":
    main()
    