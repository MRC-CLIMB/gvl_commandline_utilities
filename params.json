{"name":"GVL commandline utilities","tagline":"Scripts for users of GVL cloud instances. These scripts configure GVL servers as command-line bioinformatics platforms.","body":"# gvl_commandline_utilities\r\n\r\nScripts useful for users of GVL cloud images (CloudMan instances).\r\nThese scripts configure GVL instances as command-line bioinformatics platforms, including RStudio and IPython Notebook setup.\r\n\r\n## How to run these scripts\r\n\r\nTo use, launch a GVL instance ( [instructions here](https://docs.google.com/document/d/1uYKWZckyR8kZSY6viECMJsGSTaNsS2nVMj5n_YYzxGY/pub) ), ssh in as user ubuntu, and run\r\n\r\n    git clone https://github.com/claresloggett/gvl_commandline_utilities\r\n    cd gvl_commandline_utilities\r\n    sh run_all.sh\r\n\r\nThis version of gvl_commandline_utilities is intended to run on GVL image v2.20 or later.\r\nSome of the scripts are dependent on the correct config hooks being available in\r\n/usr/nginx/conf/nginx.conf .\r\n\r\nThe main scripts you are likely to want to run yourself are:\r\n* `run_all.sh` : configure your instance for command-line use and install services.\r\n* `setup_user.sh` : after running `run_all.sh`, can be run again to configure additional user accounts.\r\n* `toolshed_to_modules.py` : after running `run_all.sh`, can be run again to update module files. This is useful if tools have been added or removed using the Galaxy Toolshed.\r\n* `galaxy-fuse.py` : an ordinary user can run this script to set up access to their Galaxy Datasets, if they have a Galaxy account.\r\n\r\n## How to use installed features\r\n\r\nRunning `run_all.sh` will create a non-sudo account called \"researcher\", with various services configured.\r\nIt is more secure and convenient to use the researcher account for ordinary research activities, but\r\nto carry out admin actions, you will need to use a sudoer account such as ubuntu.\r\n\r\nTo access the below features, the best way is to log out of the ubuntu account and ssh in as user researcher. Alternatively if you are already logged in as ubuntu, you can run\r\n\r\n    su - researcher\r\n    script /dev/null\r\n\r\n(The script command will allow you to use screen after running su.)\r\n\r\nYou can then find documentation on most of the features described on this page by examining the\r\nREADME.txt file in your home directory:\r\n\r\n    less ~/README.txt\r\n\r\nTo access specific services, including those that come pre-installed on GVL instances:\r\n\r\n**CloudMan** is already installed, without running these scripts.\r\nIt is accessible at\r\n\r\n    http://<your-ip-address>/cloud\r\n\r\n**VNC, for remote desktop access** is already installed, without running these scripts.\r\nIt is accessible at\r\n\r\n    http://<your-ip-address>/vnc\r\n\r\n**Galaxy** is already installed, without running these scripts. The Galaxy application directory\r\ncan be found via the symlink `~/galaxy`, and Galaxy is accessible at\r\n\r\n    http://<your-ip-address>/\r\n\r\n**Galaxy-installed reference genomes**, as well as genome indices created by Galaxy-installed\r\ntools, can be accessed by command-line users via the symlink `~/galaxy_genomes` .\r\nUnless configured otherwise, this directory tree will be mounted using a shared filesystem and\r\ntherefore read-only.\r\n\r\n**Galaxy Datasets** can be mounted for direct read access using the galaxy-fuse script,\r\nwhich can be found in your home directory at `~/galaxy-fuse.py`. You will need your Galaxy API key,\r\nfound by logging into Galaxy and selecting the menu option User -> API Keys.\r\nTo use, run\r\n\r\n    python galaxy-fuse.py galaxy_files <api-key> &\r\n\r\nThis puts the galaxy-fuse process into the background. `galaxy_files` can be replaced\r\nby any desired mountpoint. After running the above command, Galaxy Datasets will\r\nappear as read-only files, organised by History, under the directory galaxy_files.\r\n\r\nSee the notes on the `galaxy-fuse.py` script below for caveats.\r\n\r\nA per-user **web-accessible folder** can be found at `~/public_html` . Any files you place in this\r\ndirectory will be _publicly_ accessible at\r\n\r\n    http://<your-ip-address>/public/researcher/<filename>\r\n\r\nIf you create extra user accounts using `setup_user.sh`, each account will get a similar folder which redirects\r\nto a URL as above, with `researcher` replaced by the relevant username.\r\n\r\n**RStudio** is accessible at\r\n\r\n    http://<your-ip-address>/rstudio/\r\n\r\nYou can log into RStudio with username \"researcher\" and the corresponding linux password.\r\nAny other linux accounts created by running `setup_user.sh` will similarly have RStudio accounts.\r\n\r\nAn **IPython Notebook** profile has been created for running a password-protected notebook\r\nserver over the web. It does not run by default - it must be launched by a user such as researcher.\r\nYou can launch IPython Notebook by changing to any desired working directory and running\r\n\r\n    ipython notebook --profile=nbserver\r\n\r\nIf you want the server to run while you are logged out, you may want\r\nto enter a screen session first by running `screen`. The next time you log in,\r\nyou can reconnect to it using `screen -r`.\r\n\r\nTo access the running ipython notebook, point your browser to:\r\n\r\n    https://<your-ip-address>/ipython/\r\n\r\nNote the https in the URL!\r\nYou will need the password you entered during setup.\r\nYour connection will be encrypted. If you use the current default setup you will\r\nsee a browser warning due to the self-signed certificate - this is expected.\r\n\r\nAnyone who knows the password to your notebook server will be able to execute\r\narbitrary code under your account, so keep this password private. You should treat\r\nit as you would your ssh login credentials.\r\n\r\nUnder the default configuration, only ONE user can run IPython Notebook at a time.\r\nIf you have multiple users, you may want to alter your config.\r\n\r\n**Tools installed as part of CloudBioLinux** will be in the usual locations for binaries,\r\nand usually already in your path.\r\n\r\n**Tools installed by the Galaxy Toolshed** will not be in your path and multiple versions\r\nof some tools may be available. Environment modules (http://modules.sourceforge.net/) have been created\r\nand will give access to most installed Galaxy Toolshed tools. You can see available Toolshed-installed\r\ntools by running\r\n\r\n    module avail\r\n\r\nRefer to the `module` documentation for instructions on loading, viewing and unloading modules.\r\nIf Toolshed tools have been added or removed, rerunning `toolshed_to_modules.py` as\r\ndescribed below will update the environment modules.\r\n\r\nConsult http://www.genome.edu.au/ for further documentation on GVL instances.\r\n\r\n\r\n## Scripts reference\r\n\r\n### run_all.sh\r\n\r\nRun other scripts with correct ordering and permissions.\r\n\r\nAny utilities which need to be configured for all users will be configured.\r\n\r\nAn ordinary user account called \"researcher\" will be created for non-admin use,\r\nand configured with per-user utilities.\r\n\r\nUsage:\r\n\r\n    sh run_all.sh\r\n\r\n### toolshed_to_modules.py\r\n\r\nLook for the env.sh scripts used to set up the environment for Galaxy Toolshed-installed\r\ntools, and use these to create module files. The resulting modules can be accessed\r\nusing environment module commands such as `module avail` (see\r\nhttp://modules.sourceforge.net/man/module.html). Different modules should be available for\r\ndifferent installed versions of the same tool.\r\n\r\nIf a Toolshed-installed tool is uninstalled from Galaxy, running this script should\r\nclean up the module file.\r\n\r\nUsage (show help):\r\n\r\n    sudo -E python toolshed_to_modules.py -h\r\n\r\nRequires superuser permissions, and makes use of environment variables specifying module\r\nlocations.\r\n\r\n### configure_nginx.sh\r\n\r\nSet up NGINX config file structure necessary to configure RStudio, public_html, and\r\nIPython Notebook.\r\n\r\nThis script is intended to run on GVL image v2.19 or later. It assumes that the\r\nplaceholder config files commandline_utilities_http.conf and\r\ncommandline_utilities_https.conf have been configured into /usr/nginx/conf/nginx.conf .\r\n\r\nUsage:\r\n\r\n    sudo sh configure_nginx.sh\r\n\r\nRequires superuser permissions.\r\n\r\n### setup_rstudio.sh\r\n\r\nInstall and configure RStudio. This will create a group called rstudio_users, which\r\nordinary user accounts will be added to by `setup_user.sh`. RStudio will be available\r\nat `http://<your-ip-address>/rstudio/`\r\n\r\nTo use run:\r\n\r\n    sudo setup_rstudio.sh\r\n\r\nRequires superuser permissions. Assumes that configure_nginx.sh has been run.\r\n\r\n### setup_user.sh\r\n\r\nRun all scripts below which apply to an individual user. This script can be run multiple\r\ntimes to create and configure multiple non-sudo user accounts.\r\n\r\nIt will create the user account, add it to appropriate groups, and configure symlinks\r\nand services, and set passwords.\r\n\r\nUsage:\r\n\r\n    sh setup_user.sh <username>\r\n\r\n### setup_ipython_server.py\r\n\r\nConfigure an ipython notebook profile to run the ipython notebook server including\r\npassword-protection and SSL encryption. The notebook server, when running, will be\r\navailable at `http://<your-ip-address>/ipython/`\r\n\r\nThis script does not require sudo and can be run by an individual user to configure\r\nIPython Notebook under their account. It should _not_ be run by the suduer account ubuntu,\r\nas it is dangerous to launch a notebook server from this account.\r\n\r\nUsage (as the appropriate user):\r\n\r\n    python setup_ipython_server.py\r\n\r\nThis script assumes that configure_nginx.sh has been run to set up the appropriate\r\nport forwarding. Note that under the default config, only ONE user can run IPython\r\nNotebook at any one time. More advanced configurations are possible which allow multiple\r\ninstances to be served up at different addresses or different ports.\r\n\r\n### add_public_html.sh\r\n\r\nCreate a public_html directory and redirect for the specified user.\r\n\r\nUsage:\r\n\r\n    sudo sh add_public_html.sh <username>\r\n\r\nRequires superuser permissions. Assumes that `configure_nginx.sh` has been run.\r\n\r\n### galaxy-fuse.py\r\n\r\nThis script can be found in the home directory of each ordinary user, e.g. at\r\n`~researcher/galaxy-fuse.py`. It is *not* called as part of the setup process by `run_all.sh`.\r\n\r\nTo use this, you should log in as an ordinary user (e.g. `researcher`). You will\r\nneed your Galaxy API key, found by logging into Galaxy and selecting the menu\r\noption User -> API Keys. You can mount your Galaxy Datasets using a command like\r\n\r\n    python galaxy-fuse.py galaxy_files <api-key> &\r\n\r\nThis puts the galaxy-fuse process into the background. `galaxy_files` can be replaced\r\nby any desired mountpoint. After running the above command, Galaxy Datasets will\r\nappear as read-only files, organised by History, under the directory galaxy_files.\r\n\r\nNote that:\r\n* Galaxy Datasets will be read-only, since writing to them directly is not supported\r\nby the Galaxy API\r\n* Datasets with non-unique names will have the Dataset ID appended to disambiguate them\r\n* History or Dataset names containing a slash (/) are escaped to '%-'\r\n\r\ngalaxy-fuse was written by Dr David Powell and began life at\r\nhttps://github.com/drpowell/galaxy-fuse .\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}