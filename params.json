{"name":"GVL commandline utilities","tagline":"Scripts for users of GVL cloud instances. These scripts configure GVL servers as command-line bioinformatics platforms.","body":"# gvl_commandline_utilities\r\n\r\nScripts useful for users of GVL cloud images (CloudMan instances).\r\nThese scripts configure GVL instances as command-line bioinformatics platforms, including RStudio and IPython Notebook (through JupyterHub) setup.\r\n\r\n## How to run these scripts\r\n\r\nTo use, launch a GVL instance ( [instructions here](https://docs.google.com/document/d/1uYKWZckyR8kZSY6viECMJsGSTaNsS2nVMj5n_YYzxGY/pub) ), ssh in as user ubuntu, and run\r\n\r\n    git clone https://github.com/gvlproject/gvl_commandline_utilities\r\n    cd gvl_commandline_utilities\r\n    sh run_all.sh\r\n\r\nThis version of gvl_commandline_utilities is intended to run on GVL image 4.0 or later.\r\n\r\nYou can run these scripts as an ansible playbook, which gives the most flexibility. Basic usage:\r\n\r\n    ansible-playbook playbook.yml\r\n\r\nAvailable playbook tags:\r\n  - `setup_user` : do not bother to rerun global config, just create and configure a new user account\r\n  - `toolshed_modules` : just rerun toolshed_to_modules.py\r\n\r\nThese tags are wrapped in `setup_user.sh` and `toolshed_to_modules.sh` for\r\nbackwards-compatibility.\r\n\r\nAvailable variables can be found in `roles/gvl.commandline-utilities/defaults/` .\r\nNotable variables are:\r\n  - `new_user` : the username of the account to be created or reconfigured\r\n  - `use_ubuntu_password` (default is `use_ubuntu_password=yes`) : use the ubuntu/CloudMan password as the new user's password. This mode will not prompt for a password. `use_ubuntu_password=no` is more secure.\r\n\r\nSeveral convenience scripts are provided for backwards-compatibility. These are just\r\nwrappers around ansible. These are:\r\n* `run_all.sh` : configure your instance for command-line use and install services.\r\n* `setup_user.sh` : after running `run_all.sh`, can be run again to configure additional user accounts. This is a wrapper around `--tags \"setup_user\"`.\r\n* `toolshed_to_modules.sh` : after running `run_all.sh`, can be run again to update module files. This is useful if tools have been added or removed using the Galaxy Toolshed. This is a wrapper around `--tags \"toolshed_modules\"`.\r\n\r\n## How to use installed features\r\n\r\nRunning `run_all.sh` will create a non-sudo account called \"researcher\", with various services configured.\r\nIt is more secure and convenient to use the researcher account for ordinary research activities, but\r\nto carry out admin actions, you will need to use a sudoer account such as ubuntu.\r\n\r\nTo access the below features, the best way is to log out of the ubuntu account and ssh in as user researcher. Alternatively if you are already logged in as ubuntu, you can run\r\n\r\n    su - researcher\r\n    script /dev/null\r\n\r\n(The script command will allow you to use screen after running su.)\r\n\r\nYou can then find documentation on most of the features described on this page by examining the\r\nREADME.txt file in your home directory:\r\n\r\n    less ~/README.txt\r\n\r\nTo access specific services, including those that come pre-installed on GVL instances:\r\n\r\n**CloudMan** is already installed, without running these scripts.\r\nIt is accessible at\r\n\r\n    http://<your-ip-address>/cloud\r\n\r\n**VNC, for remote desktop access** is already installed, without running these scripts.\r\nIt is accessible at\r\n\r\n    http://<your-ip-address>/vnc\r\n\r\n**Galaxy** is already installed, without running these scripts. The Galaxy application directory\r\ncan be found via the symlink `~/galaxy`, and Galaxy is accessible at\r\n\r\n    http://<your-ip-address>/\r\n\r\n**Galaxy-installed reference genomes**, as well as genome indices created by Galaxy-installed\r\ntools, can be accessed by command-line users via the symlink `~/galaxy_genomes` .\r\nUnless configured otherwise, this directory tree will be mounted using a shared filesystem and\r\ntherefore read-only.\r\n\r\n**Galaxy Datasets** can be mounted for direct read access using the galaxy-fuse script,\r\nwhich can be found in your home directory at `~/galaxy-fuse.py`. You will need your Galaxy API key,\r\nfound by logging into Galaxy and selecting the menu option User -> API Keys.\r\nTo use, run\r\n\r\n    python galaxy-fuse.py <api-key> &\r\n\r\nThis puts the galaxy-fuse process into the background. After running the above command,\r\nGalaxy Datasets will appear as read-only files, organised by History, by default under\r\nthe directory `galaxy_files`.\r\n\r\nSee the notes on the `galaxy-fuse.py` script below for caveats.\r\n\r\nA per-user **web-accessible folder** can be found at `~/public_html` . Any files you place in this\r\ndirectory will be _publicly_ accessible at\r\n\r\n    http://<your-ip-address>/public/researcher/<filename>\r\n\r\nIf you create extra user accounts using `setup_user.sh`, each account will get a similar folder which redirects\r\nto a URL as above, with `researcher` replaced by the relevant username.\r\n\r\n**RStudio** is accessible at\r\n\r\n    http://<your-ip-address>/rstudio/\r\n\r\nYou can log into RStudio with username \"researcher\" and the corresponding linux password.\r\nAny other linux accounts created by running `setup_user.sh` will similarly have RStudio accounts.\r\n\r\n**JupyterHub**, a multi-user IPython notebook server, has been installed and will be available at\r\n\r\n    http://{{ ip_address }}/jupyterhub/\r\n\r\nYou can log into JupyterHub with username \"researcher\" and the corresponding linux password.\r\nAny other linux accounts created by running `setup_user.sh` will similarly have JupyterHub accounts.\r\n\r\nAnyone who knows the password to your JupyterHub server will be able to execute\r\narbitrary code under your account, so keep this password private. You should treat\r\nit as you would your ssh login credentials.\r\n\r\n**Tools installed as part of CloudBioLinux** will be in the usual locations for binaries,\r\nand usually already in your path.\r\n\r\n**Tools installed by the Galaxy Toolshed** will not be in your path and multiple versions\r\nof some tools may be available. Environment modules (http://modules.sourceforge.net/) have been created\r\nand will give access to most installed Galaxy Toolshed tools. You can see available Toolshed-installed\r\ntools by running\r\n\r\n    module avail\r\n\r\nRefer to the `module` documentation for instructions on loading, viewing and unloading modules.\r\nIf Toolshed tools have been added or removed, rerunning the relevant ansible task using `toolshed_to_modules.sh` will update the environment modules.\r\n\r\nConsult http://www.genome.edu.au/ for further documentation on GVL instances.\r\n\r\n### galaxy-fuse.py\r\n\r\nThis script is in `roles/gvl.commandline-utilities/files/` and will be copied to the home directory of each ordinary user, e.g. to\r\n`~researcher/galaxy-fuse.py`. It is *not* currently called as part of the setup process.\r\n\r\nTo use this, you should log in as an ordinary user (e.g. `researcher`). You will\r\nneed your Galaxy API key, found by logging into Galaxy and selecting the menu\r\noption User -> API Keys. You can mount your Galaxy Datasets using a command like\r\n\r\n    python galaxy-fuse.py <api-key> &\r\n\r\nThis puts the galaxy-fuse process into the background. After running the above command,\r\nGalaxy Datasets will appear as read-only files, organised by History, by default under\r\nthe directory `galaxy_files`.\r\n\r\nNote that:\r\n* Galaxy Datasets will be read-only, since writing to them directly is not supported\r\nby the Galaxy API\r\n* Datasets with non-unique names will have the Dataset ID appended to disambiguate them\r\n* History or Dataset names containing a slash (/) are escaped to '%-'\r\n\r\ngalaxy-fuse was originally written by Dr David Powell and began life at\r\nhttps://github.com/drpowell/galaxy-fuse .\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}